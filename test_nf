#!/usr/bin/env nextflow


params.reads = 'data/RochePanCancer/*/*_R{1,2}_001.fastq.gz'
params.reference_genome = 'resources/human_g1k_v37.fasta'
params.capturebed = 'config/RochePanCancer/180702_HG19_PanCancer_EZ_capture_targets.bed'
params.primarybed = 'config/RochePanCancer/180702_HG19_PanCancer_EZ_primary_targets.bed'
params.seqId = '200221_NB551319_0071_AH2HCJAFX2'
params.chromosomes = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "X", "Y", "MT"]
params.read1Adapter = 'AGATCGGAAGAGC'
params.read2Adapter = 'AGATCGGAAGAGC' 
params.worklistId = '20-958'
params.sex = '2'
params.referral = '2'
params.panel = 'RochePanCancer'
params.pipelinename = 'SomaticEnrichment'
params.expectedInsertSize = '150'
params.sampleId = '20M02656'
params.sequencing_centre = 'AWMGL'

Channel
  .fromFilePairs(params.reads, flat: true) 
  .set { reads_ch }


chromosomes_ch = Channel
    .from( params.chromosomes)

/*reads_ch.subscribe { println "$it"}*/



process removeadapters {
	input:
    set val(id), file(read1), file(read2) from reads_ch 

    output:
    set val(id), file("${params.seqId}_${params.sampleId}_${laneId}_R1.fastq") into trimmed_r1
    set val(id), file("${params.seqId}_${params.sampleId}_${laneId}_R2.fastq") into trimmed_r2

    script:
    laneId = read1.name.toString().tokenize('_').get(2)


    """
    cutadapt.sh \
        ${params.seqId} \
        ${params.sampleId} \
        ${laneId} \
        ${read1} \
        ${read2}\
        ${params.read1Adapter} \
        ${params.read2Adapter}
    """
}

trimmed_r1.into{
	trimmed_r1_fqc
	trimmed_r1_ubam
	trimmed_r1_bam
}

trimmed_r2.into{
	trimmed_r2_fqc
	trimmed_r2_ubam
	trimmed_r2_bam
}



process collate_fastqcmetrics {
	input:
	set val(id), file(r1_fastq) from trimmed_r1_fqc
	set val(id), file(r2_fastq) from trimmed_r2_fqc

	"""
	
	fastqc.sh ${r1_fastq} ${r2_fastq}

	"""
}


/*
process convert_fastq2ubam {
	
	input:
	set val(id), file(read1) from trimmed_r1_ubam
	set val(id), file(read2) from trimmed_r2_ubam

	output:
	set val(id), file("${params.seqId}_${params.sampleId}_${laneId}_unaligned.bam") into unaligned_bams 
	
    script:
    laneId = read1.name.toString().tokenize('_').get(5)
	

	"""
	fastq_to_ubam.sh \
	${read1} \
	${read2} \
	${params.sampleId} \
	${params.worklistId} \
	${params.panel} \
	${params.expectedInsertSize} \
	"""
}
*/


process align_bamfiles {

	input:
	set val(id), file(read1) from trimmed_r1_bam
	set val(id), file(read2) from trimmed_r2_bam

	output:
    file "${params.seqId}_${params.sampleId}_${laneId}.bam" into aligned_bam
    file "${params.seqId}_${params.sampleId}_${laneId}.bam.bai" into aligned_bam_indexes
    script:
    laneId = read1.name.toString().tokenize('_').get(5)
    
    """
	bwa mem \
    -v 1 \
    -t 12 \
    -p \
    -M \
    -R '@RG\\tID:${params.seqId}.${laneId}\\tCN:${params.sequencing_centre}\\tSM:${params.sampleId}\\tLB:${params.seqId}\\tPL:ILLUMINA' \
    ${params.reference_genome}\
    $read1 \
    $read2 | samtools view -Sb - | \
    samtools sort -T /var/folders/59/6qr118qs6hv7gk0nz4lb7_6m0000gv/T/ -O bam > "${params.seqId}_${params.sampleId}_${laneId}.bam" 
    samtools index "${params.seqId}_${params.sampleId}_${laneId}.bam"
	"""
}

/* -p flag missing in bwa mem step */
